// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  projects       Project[]
  activeProject  Project?  @relation("ActiveProject", fields: [activeProjectId], references: [id])
  activeProjectId String?
  webhooks       Webhook[]  // Webhooks criados pelo usuário
  
  // Novos relacionamentos
  projectMembers ProjectMember[] // Projetos em que o usuário é membro
  sentInvites    Invite[]        // Convites enviados pelo usuário
  receivedInvites Invite[]       @relation("InviteRecipient") // Convites recebidos pelo usuário
  notifications  Notification[]  // Notificações do usuário
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  logoIcon    String
  type        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  activeFor   User[]   @relation("ActiveProject")
  webhooks    Webhook[] // Webhooks associados ao projeto
  
  // Novos campos e relacionamentos
  members     ProjectMember[] // Membros do projeto
  invites     Invite[]       // Convites para este projeto
  teams       Team[]         // Equipes do projeto
}

// Modelo para Webhooks personalizados
model Webhook {
  id            String    @id @default(cuid())
  name          String    // Nome amigável do webhook
  technicalName String    // Nome técnico para uso no código
  description   String?   // Descrição opcional
  isActive      Boolean   @default(true)
  secretToken   String    // Token secreto para autenticação
  events        String[]  // Lista de eventos que disparam este webhook
  headers       Json?     // Headers personalizados como JSON
  payloadSchema Json      // Schema do payload esperado como JSON
  
  // Campos de auditoria
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relações
  userId        String    // Criador do webhook
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId     String    // Projeto ao qual o webhook está associado
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Dados recebidos pelo webhook
  webhookData   DataWebhook?

  // Índices para melhorar performance de consultas
  @@index([userId])
  @@index([projectId])
  @@index([technicalName])
}

// Modelo para armazenar dados recebidos por webhooks
model DataWebhook {
  id            String    @id  // Esse é o id do webhook, usado como chave primária
  data          Json      // Dados JSON recebidos pelo webhook
  createdAt     DateTime  @default(now()) // Data do último recebimento
  updatedAt     DateTime  @updatedAt // Data de atualização
  
  // Relação com o webhook
  webhook       Webhook   @relation(fields: [id], references: [id], onDelete: Cascade)
}

// Modelo para Membros do Projeto (relacionamento muitos-para-muitos)
model ProjectMember {
  id        String   @id @default(cuid())
  role      String   @default("member") // Função do usuário: admin, member, etc.
  joinedAt  DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Relação com TeamMember - um membro de projeto pode estar em várias equipes
  teamMembers TeamMember[]
  
  @@unique([userId, projectId]) // Um usuário só pode ser membro uma vez
  @@index([userId])
  @@index([projectId])
}

// Modelo para Convites
model Invite {
  id          String    @id @default(cuid())
  email       String    // Email do destinatário
  status      String    @default("pending") // pending, accepted, rejected
  inviteToken String    @unique // Token para convites por link
  createdAt   DateTime  @default(now())
  expiresAt   DateTime  // Data de expiração do convite
  
  // Relações
  senderId    String
  sender      User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  recipientId String?   // Pode ser nulo se o destinatário ainda não tiver conta
  recipient   User?     @relation("InviteRecipient", fields: [recipientId], references: [id], onDelete: SetNull)
  
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([senderId])
  @@index([recipientId])
  @@index([projectId])
  @@index([inviteToken])
}

// Modelo para Notificações
model Notification {
  id          String    @id @default(cuid())
  type        String    // Tipo de notificação: invite, mention, etc.
  content     Json      // Conteúdo da notificação em formato JSON
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Modelo para Equipes
model Team {
  id            String     @id @default(cuid())
  name          String     // Nome da equipe
  description   String?    // Descrição opcional da equipe
  logoIcon      String?    @default("users") // Ícone da equipe (nome do ícone do Lucide)
  iconColor     String?    // Cor do ícone da equipe (para UI)
  isActive      Boolean    @default(true)
  
  // Campos de auditoria
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relação com o projeto
  projectId     String
  project       Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Membros da equipe
  members       TeamMember[]
  
  @@index([projectId])
}

// Modelo para Membros da Equipe
model TeamMember {
  id            String     @id @default(cuid())
  role          String     @default("member") // Papel na equipe: lead, member, etc.
  joinedAt      DateTime   @default(now())
  
  // Relação com a equipe
  teamId        String
  team          Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  // Relação com o membro do projeto
  projectMemberId String
  projectMember   ProjectMember @relation(fields: [projectMemberId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, projectMemberId]) // Um membro só pode estar uma vez na mesma equipe
  @@index([teamId])
  @@index([projectMemberId])
}
